#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import re
import asyncio
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# Tokens
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "!!!PASTE YOUR TELEGRAM TOKEN ONLY HERE!!!")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "!!!PASTE YOUR API KEY ONLY HERE!!!")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- PROMPT ---
SYSTEM_PROMPT = """
–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ¬´RedBoot¬ª.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ, –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.

**–ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º—ã–º.
- **–ñ–∏—Ä–Ω—ã–º** –≤—ã–¥–µ–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã.
- `–ö–æ–¥–æ–º` –≤—ã–¥–µ–ª—è–π –∫–æ–º–∞–Ω–¥—ã, –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞.
- –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ñ–∏—Å `-`.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ (üõ°Ô∏è, üîí, üí°, ‚ö†Ô∏è, ‚úÖ, üö®) –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏.
"""

# --- MARKDOWN TO HTML ---
def translate_markdown_to_html(text: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Markdown –≤ HTML-—Ç–µ–≥–∏.
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ ```...```
    text = re.sub(r'```(.*?)```', r'<pre>\1</pre>', text, flags=re.DOTALL)
    # –ó–∞—Ç–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **...**
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    # –ò –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–¥ `...`
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    return text

def sanitize_telegram_html(text: str) -> str:
    """–ù–∞–¥–µ–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML, –æ—Å—Ç–∞–≤–ª—è—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ Telegram —Ç–µ–≥–∏ –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏."""
    allowed_tags = ['b', 'i', 'u', 's', 'a', 'code', 'pre']
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    for tag in allowed_tags:
        text = text.replace(f'&lt;{tag}&gt;', f'<{tag}>').replace(f'&lt;/{tag}&gt;', f'</{tag}>')
    text = text.replace(f'&lt;pre&gt;', '<pre>').replace(f'&lt;/pre&gt;', '</pre>')
    return text

def configure_gemini():
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        safety_settings = { HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE, HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE, HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE, HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE, }
        model = genai.GenerativeModel(model_name="gemini-1.5-flash", system_instruction=SYSTEM_PROMPT, safety_settings=safety_settings)
        return model
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini AI: {e}")
        return None

# --- –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    context.chat_data.clear()
    await update.message.reply_html(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.mention_html()}!\n\n–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ <b>RedBoot</b>. –ù–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_html("<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∏ –æ–±–Ω–æ–≤–ª—è—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞."""
    user_message = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.username}: {user_message}")
    
    processing_message = await update.message.reply_text("üß†...")

    try:
        # --- –õ–û–ì–ò–ö–ê –ü–ê–ú–Ø–¢–ò: –ù–ê–ß–ê–õ–û ---
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞. –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        history = context.chat_data.get('history', [])
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Gemini, –≤–∫–ª—é—á–∞—è –≤—Å—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é.
        messages_for_gemini = history + [{'role': 'user', 'parts': [user_message]}]
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        chat_model = genai.GenerativeModel('gemini-1.5-flash')
        stream_response = chat_model.generate_content(messages_for_gemini, stream=True)

        # --- –õ–û–ì–ò–ö–ê –ü–ê–ú–Ø–¢–ò: –ö–û–ù–ï–¶ ---
        full_text = ""
        last_edit_time = asyncio.get_event_loop().time()
        
        for chunk in stream_response:
            if chunk.text:
                full_text += chunk.text
                current_time = asyncio.get_event_loop().time()
                if current_time - last_edit_time > 0.6:
                    translated_text = translate_markdown_to_html(full_text)
                    sanitized_text = sanitize_telegram_html(f"{translated_text} ‚úçÔ∏è")
                    try:
                        await processing_message.edit_text(text=sanitized_text, parse_mode=ParseMode.HTML)
                        last_edit_time = current_time
                    except BadRequest as e:
                        if "Message is not modified" not in str(e):
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        final_translated_text = translate_markdown_to_html(full_text)
        final_sanitized_text = sanitize_telegram_html(final_translated_text)
        
        if processing_message.text != final_sanitized_text:
             await processing_message.edit_text(text=final_sanitized_text, parse_mode=ParseMode.HTML)
             
        # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò: –ù–ê–ß–ê–õ–û ---
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.
        history.append({'role': 'user', 'parts': [user_message]})
        history.append({'role': 'model', 'parts': [full_text]})
        
        # 5. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —Ä–æ—Å–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (—Å–µ–π–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π).
        if len(history) > 50:
            history = history[-50:]
            
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–∞–º—è—Ç—å —á–∞—Ç–∞.
        context.chat_data['history'] = history
        # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò: –ö–û–ù–ï–¶ ---

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await processing_message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ü–ê–ú–Ø–¢–ò ---
async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
    context.chat_data.clear()
    await update.message.reply_html("üßπ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---

def main() -> None:
    if not TELEGRAM_TOKEN or not GEMINI_API_KEY or "–°–Æ–î–ê" in TELEGRAM_TOKEN:
        logger.error("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω—ã Telegram –∏–ª–∏ Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å '–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º'...")
    application.run_polling()


if __name__ == "__main__":
    gemini_model = configure_gemini()
    if gemini_model:
        main()
    else:
        logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å Gemini. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
